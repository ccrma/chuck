[[ChucK]] Keywords Default Types and Operators

=control=
==for==
''for loop'' - example:

    // print out now for the next 100 seconds, once a second
    for( 0 => int i; i < 100; i++ )
        1::second => now => stdout;


==while==
''while loop'' - example:

    // make time variable 'later', set to 5 seconds after now
    now + 5::second => time later;
    
    // while we are not there yet...
    while( now < later )
    {
        // print out the current ChucK time
        now => stdout;
        // advance time by 1 second
        1::second => now;
    }


==until==
''until loop'' - kind of the opposite of the while loop - example:

    // infinite time-loop
    until( false )
    {
        // print out now
        now => stdout;
        // advance time by 100 ms
        100::ms => now;
    }


==if==
''if'' - example:

    if( 1.0 > 0.0 ) "wow" => stdout;


==else==
''else'' - example:

    if( std.rand2f( 0.0, 1.0 ) > .5 )
        "yes" => stdout;
    else
        "no" => stdout;


==spork==
* ''dynamically spork a shred, from a function or an expression''
* ''this operation is sample-synchronous, the new shred is shredule to execute immediate
* ''in the current implementation, when a parent shred exits, all child shreds exit (this behavior will be enhanced in the future)''

* example (also see [http://chuck.cs.princeton.edu/doc/examples/ examples/] : [http://chuck.cs.princeton.edu/doc/examples/wind2.ck wind2.ck], [http://chuck.cs.princeton.edu/doc/examples/pwm.ck pwm.ck], [http://chuck.cs.princeton.edu/doc/examples/fmsynth.ck fmsynth.ck] and others (> grep spork *.ck) in examples/:

   // define function
   fun void foo( string s )
   {
        while( true )
        {
            s => stdout;
            500::ms => now;
        }
    }
    
    // spork shred, passing in "you" as argument to foo
    spork ~ foo( "you" );
    // advance time by 250 ms
    250::ms => now;
    // spork another shred
    spork ~ foo( "me" );
    
    // infinite time loop - to keep child shreds around
    while( true )
         1::second => now;


==return==
''return from function'' - example:

    // define function
    fun int bar( int a, int b )
    {
        return a < b;
    }


==(coming soon)==
* switch
* break
* continue


=special values=
==now==
* when read as a value, '''now''' holds current time in ChucK
* when modified (by chucking a duration or time value to it), '''now''' advances time for the current shred
* '''now''' never advances '''except''' when time is explicitly advanced in the program
* because the above properties, '''now''' is guaranteed to always hold the correct ChucK time

example 1 (read):

    // assign now to a time value (note that foo will not advance with now)
    now => time foo;

example 2 (read):

    // print the current time
    now => stdout;

example 3 (write):

    // advance time by 500 ms
    500::ms => now;

example 4 (both in one line):

    // first advance time, then print out now
    500::ms =>now => stdout;

example 5 (addition/subtraction - also see 'arithmetic on time and duration')

    // later
    now + 10::second => time later;
    // subtract now from later (at this point, duration should equal exactly 10::second)
    later - now => dur duration;

example 6 (comparison)

    // with later from example 5 defined
    while( now < later )
    {
        now => stdout;
        1::second => now;
    }


==start==
''start time of the current shred''


==NULL (or null)==
''for objects''


==true==
''integer 1'' - example:

    // infinite time-loop
    while( true )
        1::second => now;


==false==
''integer 0''

    // infinite time-loop
    until( false )
        1::second => now;


* maybe : 1 if rand2f(0.0, 1.0) > maybe, 0 otherwise
* pi : yes, that pi (also math.pi and math.e)
* function : used to define function
* fun : same as 'function'


==(coming soon)==
* class
* extends
* implements
* public
* protected
* private
* static
* const
* new


=default types=
* int : integer
* float : floating point number
* dur : duration
* time : time
* void : no type!
* object : like java, base object all non-primitives inherit from
* string : string
* ugen : unit generator
* stdout : output hack


=default duration (dur)=
* samp : duration of 1 sample in ChucK time
* ms : duration of 1 millisecond
* second : duration of 1 second
* minute : 1 minute
* hour : 1 hour
* day : 1 day
* week : 1 week
* (use these to inductively construct you own)
* (also use these to compute offsets from time)


=arithmetic on time and duration in ChucK=
dur / dur -> float


=operators=
* +
* -
* *
* /
* %
* =>
* =<
* &&
* ||
* ==
* ^
* &
* |
* ~
* ::
* ++
* --
* <
* >
* @=>
* +=>
* -=>
* *=>
* /=>
* %=>


=reserved (for now)=
* then
* before
* after
* at